#region Using Statements
using System;
using System.Collections.Generic;
using Microsoft.Xna.Framework;
using Microsoft.Xna.Framework.Content;
using Microsoft.Xna.Framework.Graphics;
using Microsoft.Xna.Framework.Input;
using Microsoft.Xna.Framework.Storage;
using Microsoft.Xna.Framework.GamerServices;
using Microsoft.Xna.Framework.Media;
using GameJamGame.joels_Work;
#endregion

namespace GameJamGame
{
    /// <summary>
    /// This is the main type for your game
    /// </summary>
    /// 


    public class Game1 : Game
    {
        GraphicsDeviceManager graphics;
        SpriteBatch spriteBatch;

<<<<<<< HEAD
        Texture2D image; // piss off
        Ending endingScene;

        bool ending = true;

=======
>>>>>>> Art
        public static Texture2D backGroundPlaceHolderSave;
        public static Texture2D objectPlaceHolderSave;
        public static Texture2D flowerTexture;
        //public static Texture2D playerTextureSave;

        public static Texture2D playerSpriteSheet;
        public static int currentLevel = -1;
        public static int currentLevelList = 0;
<<<<<<< HEAD
                                                           
        // level 1 tutorial level                          
        public static Texture2D level1BGSave;              
        public static Texture2D level2BGSave;              
        public static Texture2D level3BGSave;              
        public static Texture2D level1BreakableBlockSave;  
                                                           
        public static Random rnd = new Random();           
                                                                    
        // level 2 stuff                                            
        public static Texture2D background20;                       
        public static Texture2D background21;                       
        public static Texture2D background22;                       
        public static Texture2D jumpCounter1;                       
        public static Texture2D jumpCounter2;                       
        public static Texture2D jumpCounter3;                                
        public static Texture2D jumpCounter4;                                
		public static Texture2D jumpCounterAlpha1;                           
		public static Texture2D jumpCounterAlpha2;                           
		public static Texture2D jumpCounterAlpha3;                           
		public static Texture2D jumpCounterAlpha4;                           
                                                                             
        // game end                                                          
        public static Texture2D endingScreen;                       
        public static Texture2D spotLight;                          
        public static Texture2D flowerSprites;                      
        public static Texture2D text1;                              
        public static Texture2D text2;                              
        public static Texture2D text3;                              
        public static Texture2D text4;                              
                                                                    
=======

        // level 1 tutorial level
        public static Texture2D level1BGSave;
        public static Texture2D level2BGSave;
        public static Texture2D level3BGSave;
        public static Texture2D level1BreakableBlockSave;

        public static Random rnd = new Random();

        // level 2 stuff
        public static Texture2D background20;
        public static Texture2D background21;
        public static Texture2D background22;
        public static Texture2D jumpCounter1;
        public static Texture2D jumpCounter2;
        public static Texture2D jumpCounter3;
        public static Texture2D jumpCounter4;

		// level FINAL stuff
		public static Texture2D backgroundF0;
		public static Texture2D backgroundF1;
		public static Texture2D backgroundF2;
		public static Texture2D arrowDown;
		public static Texture2D arrowLeft;
		public static Texture2D arrowRight;
		public static Texture2D arrowUp;

>>>>>>> Art

        static Board gameBoard = new Board();
        public static List<List<Level>> levelList;

        public Game1()
            : base()
        {
            graphics = new GraphicsDeviceManager(this);
            Content.RootDirectory = "Content";
        }

        /// <summary>
        /// Allows the game to perform any initialization it needs to before starting to run.
        /// This is where it can query for any required services and load any non-graphic
        /// related content.  Calling base.Initialize will enumerate through any components
        /// and initialize them as well.
        /// </summary>
        protected override void Initialize()
        {
            // TODO: Add your initialization logic here
            graphics.PreferredBackBufferWidth = 1280;  // set this value to the desired width of your window
            graphics.PreferredBackBufferHeight = 720;   // set this value to the desired height of your window
            graphics.ApplyChanges();
            base.Initialize();
        }

        /// <summary>
        /// LoadContent will be called once per game and is the place to load
        /// all of your content.
        /// </summary>
        protected override void LoadContent()
        {
            // Create a new SpriteBatch, which can be used to draw textures.
            spriteBatch = new SpriteBatch(GraphicsDevice);

            //Song song = Content.Load<Song>("song_title");  // Put the name of your song here instead of "song_title"
            //MediaPlayer.Play(song);

            // TODO: use this.Content to load your game content here

			backGroundPlaceHolderSave = Content.Load<Texture2D>("Images/backGroundStart.png");
            objectPlaceHolderSave = Content.Load<Texture2D>("Images/objectPlaceHolder.png");

            // load spriteSheet
            playerSpriteSheet = Content.Load<Texture2D>("Images/Player/PlayerSpriteSheet1.png");
            flowerTexture = Content.Load<Texture2D>("Images/flower.png");
            // level 1 load
            level1BGSave = Content.Load<Texture2D>("Images/Level1/1_1BG.png");
            level2BGSave = Content.Load<Texture2D>("Images/Level1/1_2BG.png");
            level3BGSave = Content.Load<Texture2D>("Images/Level1/1_3.png");
            level1BreakableBlockSave = Content.Load<Texture2D>("Images/Level1/iceblock.png");

            // level 2 load

            background20  = Content.Load<Texture2D>("Images/Level2/3_1_bg.png");
            background21  = Content.Load<Texture2D>("Images/Level2/3_2_bg.png");
            background22  = Content.Load<Texture2D>("Images/Level2/3_3_bg.png");
            jumpCounter1  = Content.Load<Texture2D>("Images/Level2/jump counter 1.png");
            jumpCounter2  = Content.Load<Texture2D>("Images/Level2/jump counter 2.png");
            jumpCounter3  = Content.Load<Texture2D>("Images/Level2/jump counter 3.png");
            jumpCounter4  = Content.Load<Texture2D>("Images/Level2/jump counter 4.png");
			jumpCounterAlpha1 = Content.Load<Texture2D>("Images/Level2/jump1.png");
			jumpCounterAlpha2 = Content.Load<Texture2D>("Images/Level2/jump2.png");
			jumpCounterAlpha3 = Content.Load<Texture2D>("Images/Level2/jump3.png");
			jumpCounterAlpha4 = Content.Load<Texture2D>("Images/Level2/jump4.png");
            
            // ending
            endingScreen = Content.Load<Texture2D>("Images/ending/gameendingscreen.png");
            spotLight = Content.Load<Texture2D>("Images/ending/spotLight.png");
            flowerSprites = Content.Load<Texture2D>("Images/ending/flower_sheet.png");
            endingScene = new Ending(flowerSprites);
            text1 = Content.Load<Texture2D>("Images/ending/Text1.png");
            text2 = Content.Load<Texture2D>("Images/ending/Text2.png");
            text3 = Content.Load<Texture2D>("Images/ending/Text3.png");
            text4 = Content.Load<Texture2D>("Images/ending/Text4.png");




			// level FINAL load
			arrowDown = Content.Load<Texture2D>("Images/LevelF/arrow platform down.png");
			arrowLeft = Content.Load<Texture2D>("Images/LevelF/arrow platform left.png");
			arrowRight = Content.Load<Texture2D>("Images/LevelF/arrow platform right");
			arrowUp = Content.Load<Texture2D>("Images/LevelF/arrow platform up");
			backgroundF0 = Content.Load<Texture2D>("Images/LevelF/5_1_bg.png");
			backgroundF1 = Content.Load<Texture2D>("Images/LevelF/5_2_bg.png");
			backgroundF2 = Content.Load<Texture2D>("Images/LevelF/5_3_bg.png");

            // create level data
            levelList = new List<List<Level>>();
            levelList.Add(new List<Level>());
            levelList[0] = create1Levels();
            levelList.Add(new List<Level>());
            levelList[1] = create2Levels();
            gameBoard.load();
        }

        /// <summary>
        /// UnloadContent will be called once per game and is the place to unload
        /// all content.
        /// </summary>
        protected override void UnloadContent()
        {
            // TODO: Unload any non ContentManager content here
        }

        /// <summary>
        /// Allows the game to run logic such as updating the world,
        /// checking for collisions, gathering input, and playing audio.
        /// </summary>
        /// <param name="gameTime">Provides a snapshot of timing values.</param>
        protected override void Update(GameTime gameTime)
        {
            if (GamePad.GetState(PlayerIndex.One).Buttons.Back == ButtonState.Pressed || Keyboard.GetState().IsKeyDown(Keys.Escape))
                Exit();

			// TODO: Add your update logic here
            if (!ending)
                gameBoard.update(gameTime);
            else
                endingScene.logic();


            base.Update(gameTime);
       } 

        /// <summary>
        /// This is called when the game should draw itself.
        /// </summary>
        /// <param name="gameTime">Provides a snapshot of timing values.</param>
        protected override void Draw(GameTime gameTime)
        {
            GraphicsDevice.Clear(Color.CornflowerBlue);

            // TODO: Add your drawing code here

            spriteBatch.Begin();

<<<<<<< HEAD
            

            if (!ending)
                gameBoard.draw(spriteBatch);
            else
            {
                endingScene.draw(spriteBatch);
            }

=======
			gameBoard.draw(spriteBatch);
>>>>>>> Art

            spriteBatch.End();

            base.Draw(gameTime);
        }

        public static void endLevel(int direction)
        {
            gameBoard.endLevel(direction);
        }
		public static void cycle()
		{
			gameBoard.cycleBlocks();
		}
        public static void swapCompleteBlocks()
        {
            List<Level> levelList1 = levelList[currentLevelList];

            for (int i = 0; i < levelList1.Count; i++)
            {
                levelList1[i].changeRespawn(levelList1[i].firstEndPoint);
                for (int j = 0; j < levelList1[i].getObjectList().Count; j++)
                {
                    if (levelList1[i].getObjectList()[j].GetType() == typeof(CompleteBlock))
                    {
                        ((CompleteBlock)(levelList1[i].getObjectList()[j])).visable = !((CompleteBlock)(levelList1[i].getObjectList()[j])).visable;
                    
                    }
                }
            }
        }

		public static int getCycle()
		{
			return gameBoard.getCycleNumber();
		}
            
        public static List<GameObject> reloadLevel(bool invert)
        {
            List<GameObject> returnList = new List<GameObject>();
            switch (currentLevel)
            {
                case 0:
                    {
                        returnList.AddRange(level11Objects());
                        break;
                    }
                case 1:
                    {
                        returnList.AddRange(level12Objects());
                        break;
                    }
                case 2:
                    {
                        returnList.AddRange(level13Objects());
                        break;
                    }
            }
            if (invert)
            {
                for (int j = 0; j < returnList.Count; j++)
                {
                    if (returnList[j].GetType() == typeof(CompleteBlock))
                    {
                        ((CompleteBlock)(returnList[j])).visable = !((CompleteBlock)(returnList[j])).visable;
                    }
                }
            }
            return returnList;
        }
        

        /*
         * 
         * create level code
         * 
         */

        private List<Level> create1Levels()
        {
            List<Level> returnList = new List<Level>();
            // lvl 1
            List<GameObject> level1GameObjectList = new List<GameObject>();
            level1GameObjectList = level11Objects();
            Level level1 = new Level(level1BGSave, level1GameObjectList, new Vector2(450,550),new Vector2(865,175),new Vector2(450,600),true);

            // lvl 2
            List<GameObject> level2GameObjectList = new List<GameObject>();
            level2GameObjectList = level12Objects();
            Level level2 = new Level(level2BGSave, level2GameObjectList, new Vector2(210, 175), new Vector2(1100,135), new Vector2(185,175),true);

            // lvl 3
            List<GameObject> level3GameObjectList = new List<GameObject>();
            level3GameObjectList = level13Objects();
            Level level3 = new Level(level3BGSave, level3GameObjectList, new Vector2(390, 535), new Vector2(900,115), new Vector2(365,530),false);

            
            returnList.Add(level1);
            returnList.Add(level2);
            returnList.Add(level3);
            return returnList;

        }

        private static List<GameObject> level11Objects()
        {
            List<GameObject> returnList = new List<GameObject>();

             // 60 - 60

            returnList.Add(new Shatter(level1BreakableBlockSave, new Vector2(510, 595), Color.White));
            returnList.Add(new Shatter(level1BreakableBlockSave, new Vector2(510, 535), Color.White));

            returnList.Add(new Shatter(level1BreakableBlockSave, new Vector2(570, 475), Color.White));
            returnList.Add(new Shatter(level1BreakableBlockSave, new Vector2(570, 535), Color.White));

            returnList.Add(new Shatter(level1BreakableBlockSave, new Vector2(630, 415), Color.White));
            returnList.Add(new Shatter(level1BreakableBlockSave, new Vector2(630, 475), Color.White));

            returnList.Add(new Shatter(level1BreakableBlockSave, new Vector2(690, 415), Color.White));
            returnList.Add(new Shatter(level1BreakableBlockSave, new Vector2(690, 355), Color.White));

            returnList.Add(new Shatter(level1BreakableBlockSave, new Vector2(750, 355), Color.White));
            returnList.Add(new Shatter(level1BreakableBlockSave, new Vector2(750, 295), Color.White));

            returnList.Add(new Shatter(level1BreakableBlockSave, new Vector2(810, 295), Color.White));
            returnList.Add(new Shatter(level1BreakableBlockSave, new Vector2(810, 235), Color.White));

            // add walls
            returnList.Add(new invisibleBlock(objectPlaceHolderSave, new Rectangle(290, 40, 390 - 290 , 660 - 40), Color.White));
            returnList.Add(new invisibleBlock(objectPlaceHolderSave, new Rectangle(370, 625, 920 - 370, 680 - 40), Color.White));
            returnList.Add(new invisibleBlock(objectPlaceHolderSave, new Rectangle(840, 205, 1050 - 840, 660 - 205), Color.White));

            // complete block
            returnList.Add(new CompleteBlock(objectPlaceHolderSave, new Vector2(890, 175), Color.Red, 1,true));
            returnList.Add(new CompleteBlock(objectPlaceHolderSave, new Vector2(450, 600), Color.Red, -1, false));

            return returnList;


        }
        private static List<GameObject> level12Objects()
        {
            List<GameObject> returnList = new List<GameObject>();

            returnList.Add(new Shatter(level1BreakableBlockSave, new Vector2(270, 235), Color.White));
            returnList.Add(new Shatter(level1BreakableBlockSave, new Vector2(330, 235), Color.White));
            returnList.Add(new Shatter(level1BreakableBlockSave, new Vector2(390, 355), Color.White));

            returnList.Add(new Shatter(level1BreakableBlockSave, new Vector2(450, 295), Color.White));
            returnList.Add(new Shatter(level1BreakableBlockSave, new Vector2(510, 415), Color.White));
            returnList.Add(new Shatter(level1BreakableBlockSave, new Vector2(570, 415), Color.White));
            returnList.Add(new Shatter(level1BreakableBlockSave, new Vector2(570, 235), Color.White));
            returnList.Add(new Shatter(level1BreakableBlockSave, new Vector2(630, 535), Color.White));
            returnList.Add(new Shatter(level1BreakableBlockSave, new Vector2(690, 295), Color.White));
            returnList.Add(new Shatter(level1BreakableBlockSave, new Vector2(750, 535), Color.White));
            returnList.Add(new Shatter(level1BreakableBlockSave, new Vector2(810, 355), Color.White));
            returnList.Add(new Shatter(level1BreakableBlockSave, new Vector2(870, 535), Color.White));
            returnList.Add(new Shatter(level1BreakableBlockSave, new Vector2(930, 415), Color.White));
            returnList.Add(new Shatter(level1BreakableBlockSave, new Vector2(990, 535), Color.White));
            returnList.Add(new Shatter(level1BreakableBlockSave, new Vector2(990, 595), Color.White));

            returnList.Add(new invisibleBlock(objectPlaceHolderSave, new Rectangle(150, 0, 240 - 150, 140 - 0), Color.White));
            returnList.Add(new invisibleBlock(objectPlaceHolderSave, new Rectangle(80, 80, 180 - 80, 230 - 80), Color.White));
            returnList.Add(new invisibleBlock(objectPlaceHolderSave, new Rectangle(160, 205, 240 - 160, 800 - 205), Color.White));
            returnList.Add(new invisibleBlock(objectPlaceHolderSave, new Rectangle(1080, 0, 1160 - 1080, 505 - 0), Color.White));
            returnList.Add(new invisibleBlock(objectPlaceHolderSave, new Rectangle(1080, 565, 1200 - 1080, 715 - 565), Color.White));


            // complete block
            returnList.Add(new CompleteBlock(objectPlaceHolderSave, new Vector2(1140, 535), Color.Red, 1, true));
            returnList.Add(new CompleteBlock(objectPlaceHolderSave, new Vector2(210, 175), Color.Red, -1, false));


            return returnList;


        }
        private static List<GameObject> level13Objects()
        {
            List<GameObject> returnList = new List<GameObject>();

            returnList.Add(new invisibleBlock(objectPlaceHolderSave, new Rectangle(260, 50, 480 - 260, 500 - 50), Color.White));
            returnList.Add(new invisibleBlock(objectPlaceHolderSave, new Rectangle(275, 400, 360 - 275, 600 - 400), Color.White));
            returnList.Add(new invisibleBlock(objectPlaceHolderSave, new Rectangle(450, 625, 885 - 450, 665 - 625), Color.White));
            returnList.Add(new invisibleBlock(objectPlaceHolderSave, new Rectangle(840, 130, 900 - 840, 870 - 130), Color.White));

            returnList.Add(new invisibleBlock(objectPlaceHolderSave, new Rectangle(320, 560, 480 - 320, 630 - 560), Color.White));


            returnList.Add(new Flower(flowerTexture, new Vector2(750, 600), Color.Green));
            returnList.Add(new CompleteBlock(objectPlaceHolderSave, new Vector2(390, 530), Color.Red, -1, false));


            return returnList;


        }



        private List<Level> create2Levels()
        {
            List<Level> returnList = new List<Level>();
            // lvl 1
            List<GameObject> level1GameObjectList = new List<GameObject>();
            level1GameObjectList = level21Objects();
            Level level1 = new Level(background20, level1GameObjectList, new Vector2(430, 550), new Vector2(860, 175), new Vector2(430, 590), true);

            // lvl 2
            List<GameObject> level2GameObjectList = new List<GameObject>();
            level2GameObjectList = level22Objects();
            Level level2 = new Level(background21, level2GameObjectList, new Vector2(210, 175), new Vector2(1105, 295), new Vector2(210, 175), true);

            // lvl 3
            List<GameObject> level3GameObjectList = new List<GameObject>();
            level3GameObjectList = level23Objects();
            Level level3 = new Level(background22, level3GameObjectList, new Vector2(390, 395), new Vector2(800, 175), new Vector2(390, 295), false);


            returnList.Add(level1);
            returnList.Add(level2);
            returnList.Add(level3);
            return returnList;
        }

        private static List<GameObject> level21Objects()
        {
            List<GameObject> returnList = new List<GameObject>();

			returnList.Add(new CycleBlock(jumpCounterAlpha1, jumpCounter1, new Vector2(510, 595), Color.White, 1));
			returnList.Add(new CycleBlock(jumpCounterAlpha2, jumpCounter2, new Vector2(570, 535), Color.White, 2));
			returnList.Add(new CycleBlock(jumpCounterAlpha3, jumpCounter3, new Vector2(630, 535), Color.White, 3));
			returnList.Add(new CycleBlock(jumpCounterAlpha4, jumpCounter4, new Vector2(690, 475), Color.White, 4));
			returnList.Add(new CycleBlock(jumpCounterAlpha1, jumpCounter1, new Vector2(630, 415), Color.White, 1));
			returnList.Add(new CycleBlock(jumpCounterAlpha2, jumpCounter2, new Vector2(690, 355), Color.White, 2));
			returnList.Add(new CycleBlock(jumpCounterAlpha3, jumpCounter3, new Vector2(750, 295), Color.White, 3));
			returnList.Add(new CycleBlock(jumpCounterAlpha4, jumpCounter4, new Vector2(810, 235), Color.White, 4));
			

			// add walls
			returnList.Add(new invisibleBlock(objectPlaceHolderSave, new Rectangle(290, 40, 390 - 290, 660 - 40), Color.White));
			returnList.Add(new invisibleBlock(objectPlaceHolderSave, new Rectangle(370, 625, 920 - 370, 680 - 40), Color.White));
			returnList.Add(new invisibleBlock(objectPlaceHolderSave, new Rectangle(840, 205, 1050 - 840, 660 - 205), Color.White));

			// complete block
			returnList.Add(new CompleteBlock(objectPlaceHolderSave, new Vector2(890, 175), Color.Red, 1, true));
			returnList.Add(new CompleteBlock(objectPlaceHolderSave, new Vector2(450, 600), Color.Red, -1, false));

            return returnList;
        }
        private static List<GameObject> level22Objects()
        {
            List<GameObject> returnList = new List<GameObject>();

			returnList.Add(new CycleBlock(jumpCounterAlpha3, jumpCounter3, new Vector2(330, 355), Color.White, 3));

			returnList.Add(new CycleBlock(jumpCounterAlpha1, jumpCounter1, new Vector2(390, 235), Color.White, 1));

			returnList.Add(new CycleBlock(jumpCounterAlpha4, jumpCounter4, new Vector2(450, 355), Color.White, 4));
			returnList.Add(new CycleBlock(jumpCounterAlpha1, jumpCounter1, new Vector2(450, 415), Color.White, 1));
			returnList.Add(new CycleBlock(jumpCounterAlpha2, jumpCounter2, new Vector2(450, 535), Color.White, 2));

			returnList.Add(new CycleBlock(jumpCounterAlpha2, jumpCounter2, new Vector2(570, 295), Color.White, 2));
			returnList.Add(new CycleBlock(jumpCounterAlpha3, jumpCounter3, new Vector2(570, 475), Color.White, 3));

			returnList.Add(new CycleBlock(jumpCounterAlpha4, jumpCounter4, new Vector2(630, 175), Color.White, 4));

			returnList.Add(new CycleBlock(jumpCounterAlpha4, jumpCounter4, new Vector2(690, 415), Color.White, 4));

			returnList.Add(new CycleBlock(jumpCounterAlpha2, jumpCounter2, new Vector2(750, 295), Color.White, 2));
			returnList.Add(new CycleBlock(jumpCounterAlpha1, jumpCounter1, new Vector2(750, 355), Color.White, 1));
			returnList.Add(new CycleBlock(jumpCounterAlpha3, jumpCounter3, new Vector2(750, 475), Color.White, 3));

			returnList.Add(new CycleBlock(jumpCounterAlpha2, jumpCounter2, new Vector2(810, 295), Color.White, 2));
			returnList.Add(new CycleBlock(jumpCounterAlpha2, jumpCounter2, new Vector2(810, 475), Color.White, 2));

			returnList.Add(new CycleBlock(jumpCounterAlpha4, jumpCounter4, new Vector2(930, 355), Color.White, 4));
			returnList.Add(new CycleBlock(jumpCounterAlpha1, jumpCounter1, new Vector2(930, 415), Color.White, 1));
			returnList.Add(new CycleBlock(jumpCounterAlpha2, jumpCounter2, new Vector2(930, 535), Color.White, 2));

			returnList.Add(new CycleBlock(jumpCounterAlpha1, jumpCounter1, new Vector2(990, 235), Color.White, 1));

			returnList.Add(new CycleBlock(jumpCounterAlpha3, jumpCounter3, new Vector2(1050, 355), Color.White, 3));

			returnList.Add(new invisibleBlock(objectPlaceHolderSave, new Rectangle(150-30, 55-30, 60, 660), Color.White));
			returnList.Add(new invisibleBlock(objectPlaceHolderSave, new Rectangle(210-30, 55-30, 60, 120), Color.White));
			returnList.Add(new invisibleBlock(objectPlaceHolderSave, new Rectangle(210-30, 235-30, 60, 480), Color.White));
			returnList.Add(new invisibleBlock(objectPlaceHolderSave, new Rectangle(1110-30, 55-30, 60, 240), Color.White));
			returnList.Add(new invisibleBlock(objectPlaceHolderSave, new Rectangle(1110-30, 355-30, 60, 360), Color.White));
			returnList.Add(new invisibleBlock(objectPlaceHolderSave, new Rectangle(1170-30, 55-30, 60, 660), Color.White));


			// complete block
			returnList.Add(new CompleteBlock(objectPlaceHolderSave, new Vector2(210, 175), Color.Red, -1, false));
			returnList.Add(new CompleteBlock(objectPlaceHolderSave, new Vector2(1110, 295), Color.Red, 1, true));

            return returnList;
        }
        private static List<GameObject> level23Objects()
        {
            List<GameObject> returnList = new List<GameObject>();

			returnList.Add(new invisibleBlock(objectPlaceHolderSave, new Rectangle(300, 140, 60, 485), Color.White));
			returnList.Add(new invisibleBlock(objectPlaceHolderSave, new Rectangle(360, 140, 120, 125), Color.White));
			returnList.Add(new invisibleBlock(objectPlaceHolderSave, new Rectangle(360, 325, 120, 60), Color.White));
			returnList.Add(new invisibleBlock(objectPlaceHolderSave, new Rectangle(480, 385, 60, 125), Color.White));
			returnList.Add(new invisibleBlock(objectPlaceHolderSave, new Rectangle(540, 500, 60, 125), Color.White));
			returnList.Add(new invisibleBlock(objectPlaceHolderSave, new Rectangle(840, 140, 60, 485), Color.White));
			returnList.Add(new invisibleBlock(objectPlaceHolderSave, new Rectangle(600, 625, 240, 60), Color.White));

			returnList.Add(new Flower(flowerTexture, new Vector2(750, 600), Color.Green));
			returnList.Add(new CompleteBlock(objectPlaceHolderSave, new Vector2(365, 270), Color.Red, -1, false));

            return returnList;
        }
    }
}
